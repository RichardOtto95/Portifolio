name: Deploy to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'

    - name: Get dependencies
      run: flutter pub get

    - name: Build web
      run: flutter build web --wasm --base-href "/portifolio_richard/" --release

    - name: Verify build files
      run: |
        echo "Verificando arquivos do build..."
        ls -la build/web/
        echo "Verificando se main.dart.js existe..."
        test -f build/web/main.dart.js && echo "‚úÖ main.dart.js encontrado" || echo "‚ùå main.dart.js n√£o encontrado"
        echo "Verificando se flutter.js existe..."
        test -f build/web/flutter.js && echo "‚úÖ flutter.js encontrado" || echo "‚ùå flutter.js n√£o encontrado"
        echo "Verificando se index.html existe..."
        test -f build/web/index.html && echo "‚úÖ index.html encontrado" || echo "‚ùå index.html n√£o encontrado"
        echo "Verificando se manifest.json existe..."
        test -f build/web/manifest.json && echo "‚úÖ manifest.json encontrado" || echo "‚ùå manifest.json n√£o encontrado"
        echo "Verificando se favicon.png existe..."
        test -f build/web/favicon.png && echo "‚úÖ favicon.png encontrado" || echo "‚ùå favicon.png n√£o encontrado"
        echo "Verificando se flutter_service_worker.js existe..."
        test -f build/web/flutter_service_worker.js && echo "‚úÖ flutter_service_worker.js encontrado" || echo "‚ùå flutter_service_worker.js n√£o encontrado"
        echo "Verificando se pasta assets existe..."
        test -d build/web/assets && echo "‚úÖ pasta assets encontrada" || echo "‚ùå pasta assets n√£o encontrada"
        echo "Verificando se pasta icons existe..."
        test -d build/web/icons && echo "‚úÖ pasta icons encontrada" || echo "‚ùå pasta icons n√£o encontrada"

    - name: Copy .nojekyll file
      run: |
        echo "Copiando arquivo .nojekyll..."
        cp web/.nojekyll build/web/.nojekyll
        echo "‚úÖ .nojekyll copiado para build/web/"
        
        # Garantir que o .nojekyll est√° na raiz
        touch build/web/.nojekyll
        echo "‚úÖ .nojekyll garantido na raiz do build"

    - name: Ensure all files are present
      run: |
        echo "Garantindo que todos os arquivos cr√≠ticos est√£o presentes..."
        required_files=("main.dart.js" "flutter.js" "index.html" "manifest.json" "favicon.png" "flutter_service_worker.js" ".nojekyll")
        for file in "${required_files[@]}"; do
          if [ ! -f "build/web/$file" ]; then
            echo "‚ùå ERRO: Arquivo $file n√£o encontrado em build/web/"
            exit 1
          else
            echo "‚úÖ $file encontrado"
          fi
        done
        
        required_dirs=("assets" "icons")
        for dir in "${required_dirs[@]}"; do
          if [ ! -d "build/web/$dir" ]; then
            echo "‚ùå ERRO: Pasta $dir n√£o encontrada em build/web/"
            exit 1
          else
            echo "‚úÖ pasta $dir encontrada"
          fi
        done
        
        echo "üéâ Todos os arquivos necess√°rios est√£o presentes!"

    - name: Final verification
      run: |
        echo "üîç Verifica√ß√£o final antes do deploy..."
        echo "Conte√∫do da pasta build/web:"
        find build/web -type f -name "*.js" -o -name "*.html" -o -name "*.json" -o -name "*.png" | head -20
        echo ""
        echo "Tamanho dos arquivos principais:"
        ls -lh build/web/main.dart.js build/web/flutter.js build/web/index.html
        echo ""
        echo "‚úÖ Verifica√ß√£o final conclu√≠da!"

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './build/web'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4